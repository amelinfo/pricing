package com.ameltaleb.pricing.domain.model;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.ameltaleb.pricing.domain.model.aggregate.Price;
import com.ameltaleb.pricing.domain.model.valueobject.BrandId;
import com.ameltaleb.pricing.domain.model.valueobject.LocalCurrency;
import com.ameltaleb.pricing.domain.model.valueobject.PriceRange;
import com.ameltaleb.pricing.domain.model.valueobject.ProductId;
import com.ameltaleb.pricing.domain.ports.output.CurrencyValidationPort;

class PriceTest {
    private final BrandId brandId = new BrandId(1);
    private final ProductId productId = new ProductId(35455);
    private final PriceRange range = new PriceRange(
        LocalDateTime.of(2020, 6, 14, 0, 0),
        LocalDateTime.of(2020, 12, 31, 23, 59)
    );
    
    @Mock
    private CurrencyValidationPort mockValidator;
    
    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        when(mockValidator.isValid("EUR")).thenReturn(true);
    }
    
    @Test
    void shouldCreateValidPrice() {
        Price price = new Price(
            brandId,           
            productId,   
            range,
            1,
            0,
            new BigDecimal("35.50"),
            new LocalCurrency("EUR", mockValidator)
        );

        // Access fields directly (auto-generated by record)
        assertEquals(1, price.brandId().value());       
        assertEquals(35455, price.productId().value()); 
        assertEquals("EUR", price.currency().currencyCode());
    }

    @Test
    void shouldThrowIfAmountIsNull() {
        Exception ex = assertThrows(NullPointerException.class, () ->
            new Price(brandId, productId, range, 1, 1, null, new LocalCurrency("EUR", mockValidator))
        );
        assertEquals("Amount cannot be null", ex.getMessage());
    }
    
    @Test
    void shouldThrowIfAmountIsZeroOrNegative() {
        assertThrows(IllegalArgumentException.class, () ->
            new Price(brandId, productId, range, 1, 1, BigDecimal.ZERO, new LocalCurrency("EUR", mockValidator))
        );
        assertThrows(IllegalArgumentException.class, () ->
            new Price(brandId, productId, range, 1, 1, new BigDecimal("-10"), new LocalCurrency("EUR", mockValidator))
        );
    }

    @Test
    void shouldThrowIfPriorityIsInvalid() {
        assertThrows(IllegalArgumentException.class, () ->
            new Price(brandId, productId, range, 1, -1, new BigDecimal("10.00"), new LocalCurrency("EUR", mockValidator))
        );
        assertThrows(IllegalArgumentException.class, () ->
            new Price(brandId, productId, range, 1, null, new BigDecimal("10.00"), new LocalCurrency("EUR", mockValidator))
        );
    }
}