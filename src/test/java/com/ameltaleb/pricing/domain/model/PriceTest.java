package com.ameltaleb.pricing.domain.model;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.ameltaleb.pricing.domain.model.aggregate.Price;
import com.ameltaleb.pricing.domain.model.valueobject.BrandId;
import com.ameltaleb.pricing.domain.model.valueobject.LocalCurrency;
import com.ameltaleb.pricing.domain.model.valueobject.PriceRange;
import com.ameltaleb.pricing.domain.model.valueobject.ProductId;
import com.ameltaleb.pricing.domain.ports.output.CurrencyValidationPort;

class PriceTest {
    private final LocalDateTime NOW = LocalDateTime.now();
    private final LocalDateTime FUTURE = NOW.plusDays(1);
    
    @Mock
    private CurrencyValidationPort mockValidator;
    
    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        when(mockValidator.isValid("EUR")).thenReturn(true);
    }
    
    @Test
    void testPriceRecord() {
        Price price = new Price(
            new BrandId(1),           
            new ProductId(35455L),   
            new PriceRange(NOW, FUTURE),
            1,
            0,
            new BigDecimal("35.50"),
            new LocalCurrency("EUR", mockValidator)
        );

        // Access fields directly (auto-generated by record)
        assertEquals(1, price.brandId().value());       
        assertEquals(35455L, price.productId().value()); 
        assertEquals("EUR", price.currency().currencyCode());
    }
}